#+TITLE: Emacs init file written in org-mode
#+AUTHOR: Steven QUINITO MASNADA
#+STARTUP: indent
# #+SETUPFILE: ~/org/org-templates/level-1.org
#+LANGUAGE: en
#+OPTIONS: H:3 num:nil toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS: author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+HTML_HEAD: <link rel="stylesheet" title="Standard" href="../css/worg.css" type="text/css" />
#+HTML_HEAD: <script type="text/javascript"><?php include ("libjs/layersmenu-browser_detection.js"); ?></script>
#+HTML_HEAD: <link rel="stylesheet" href="../layerstreemenu.css" type="text/css"></link>
#+HTML_HEAD: <script type="text/javascript" src="libjs/layerstreemenu-cookies.js"></script>
#+XSLT: 

#+LANGUAGE: en
#+TAGS: LUKA(L) ARNAUD(A) STEVEN(S) WEB(W) noexport(n) 

To have a nice emacs configuration, you'll need:
- emacs24 (>24.3) (this way installing through elpa will save you some
  time) and emacs-goodies (e.g., for color themes)
- org-mode > 8.2 (there has been a major compatibility breakage so
  need to stay away from old versions)
- ess and R
- texlive and auctex
If you're a Mac OS X user, [[../blog/2014/05/15/emacs_and_orgmode_on_macosx.org][read this]].

* Installation Instructions
Then copy it into =~/.emacs.d/init.org=. 

- *If you are using Mac OS X, remove every line containing the word
  =xclip= in this file* (you may also be interested in reading [[file:../blog/2014/05/15/emacs_and_orgmode_on_macosx.org][this blog entry]]).
- Otherwise, you should consider installing xclip (=sudo apt-get
    install xclip= in a shell and =M-x package-install= the =xclip= package
  within emacs) as it will ease interactions with emacs when running
  in a terminal.

Then do =M-x org-babel-load-file= (=M-x= means pressing =Alt= and =x=
simultaneously to get the emacs prompt that allows you to call emacs
functions, also remember you can press =Tab= to activate auto
completion) and provide =~/.emacs.d/init.org=. This should evaluate
every piece of emacs-lisp code available here.

Next time, simply reload changes with "C-c i". If some stuff does not
work (in particular in the org-mode website generation section or in
         the tabs section), just comment them and proceeed.
* Loading files:
** Cedet
#+BEGIN_SRC emacs-lisp
  (require 'cedet)
  (require 'semantic)
  (global-ede-mode t)                      ; Enable the Project management system
  ;;(global-srecode-minor-mode 1)

  ;; Semantic
  (global-semantic-idle-completions-mode t)
  (global-semantic-decoration-mode t)
  (global-semantic-highlight-func-mode t)
  (global-semantic-show-unmatched-syntax-mode t)

  ;; CC-mode
  (add-hook 'c-mode-hook '(lambda ()
          (setq ac-sources (append '(ac-source-semantic) ac-sources))
          (local-set-key (kbd "RET") 'newline-and-indent)
          (linum-mode t)
          (semantic-mode t)))

#+END_SRC
** ELPA
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (package-initialize)
  (setq package-archives
    '(("ELPA" . "http://tromey.com/elpa/")
       ("gnu" . "http://elpa.gnu.org/packages/")
       ("melpa" . "https://melpa.org/packages/")))
#+END_SRC
** Adding .el files stored in folder elisp:                             :WEB:
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/lib/elisp/")
  ;;(add-to-list 'load-path "~/.emacs.d/elpa/org-20140707/")
  (add-to-list 'load-path "~/.emacs.d/elpa/xclip-1.5/")
  ;;(add-to-list 'load-path "~/.emacs.d/elpa/htmlize-20130207.1202/")
  ;;(require 'org-git-link) ;; Made some personal modifications
#+END_SRC
[10:42:15; 24.06.2013]
** Loading babel:                                                    :ARNAUD:
#+BEGIN_SRC emacs-lisp
  (require 'org-install)
  (require 'org)
  ;; (require 'org-html)
#+END_SRC
[17:28:05; 30.05.2013]
** Font lock                                                            :WEB:
Useful if you want to export org files in batch mode...
#+BEGIN_SRC emacs-lisp
  (require 'font-lock)      
  (require 'cc-mode) 
  (c-after-font-lock-init)
#+END_SRC
** File/mode association                                             :ARNAUD:
#+BEGIN_SRC emacs-lisp
  (setq auto-mode-alist
     (append (mapcar 'purecopy
        '(("\\.c$"   . c-mode)
  	("\\.h$"   . c-mode)
  	("\\.c.simp$" . c-mode)
  	("\\.h.simp$" . c-mode)
  	("\\.a$"   . c-mode)
  	("\\.w$"   . web-mode)
  	("\\.cc$"   . c++-mode)
  	("\\.S$"   . asm-mode)
  	("\\.s$"   . asm-mode)
  	("\\.p$"   . pascal-mode)
  	("\\.pas$" . pascal-mode)
  	("\\.tex$" . LaTeX-mode)
  	("\\.txi$" . Texinfo-mode)
  	("\\.el$"  . emacs-lisp-mode)
  	("emacs"  . emacs-lisp-mode)
  	("\\.ml[iylp]?" . tuareg-mode)
  	("[mM]akefile" . makefile-mode)
  	("[mM]akefile.*" . makefile-mode)
  	("\\.mak" . makefile-mode)
  	("\\.cshrc" . sh-mode)
  	("\\.html$" . html-mode)
  	("\\.org$" . org-mode)
  )) auto-mode-alist))
#+END_SRC

* IDE
** Cedet
# *** SRecode
# #+BEGIN_SRC emacs-lisp
# (setq-default auto-fill-function nil)
# (setq sdl-base-dir "/usr/include/SDL")
# (semantic-add-system-include sdl-base-dir)
# (add-to-list 'auto-mode-alist (cons sdl-base-dir 'c++-mode))
# (add-to-list 'auto-mode-alist (cons sdl-base-dir 'c-mode))
# (add-to-list 'semantic-lex-c-preprocessor-symbol-file (concat sdl-base-dir "/SDL.h"))
# #+END_SRC

# *** Semantics
# #+BEGIN_SRC emacs-lisp
# ;(semantic-load-enable-code-helpers)      ; Enable prototype help and smart completion
# (require 'semantic-gcc)
# (require 'semantic-ia)
# (require 'semantic-bovine)
# (global-semanticdb-minor-mode) 
# (semantic-add-system-include sdl-base-dir 'c++-mode)
# (semantic-add-system-include sdl-base-dir 'c-mode)
# (semantic-load-enable-excessive-code-helpers)
# #+END_SRC

** Autocomplete
#+BEGIN_SRC emacs-lisp
  ;; ;;(add-to-list 'load-path "~/.emacs.d/lisp")
  ;; ;;(require 'auto-complete-config)
  ;; ;;(add-to-list 'ac-dictionary-directories "~/.emacs.d//ac-dict")
  ;; ;;(ac-config-default)

  ;; ;; Autocomplete
  ;; (require 'auto-complete-config)
  ;; (add-to-list 'ac-dictionary-directories (expand-file-name
  ;;              "~/.emacs.d/elpa/auto-complete-20150618.1949/dict"))
  ;; (setq ac-comphist-file (expand-file-name
  ;;              "~/.emacs.d/ac-comphist.dat"))
  ;; (ac-config-default)

  ;; (custom-set-variables
  ;;  ;; custom-set-variables was added by Custom.
  ;;  ;; If you edit it by hand, you could mess it up, so be careful.
  ;;  ;; Your init file should contain only one such instance.
  ;;  ;; If there is more than one, they won't work right.
  ;;  '(ansi-color-names-vector
  ;;    ["#272822" "#F92672" "#A6E22E" "#E6DB74" "#66D9EF" "#FD5FF0" "#A1EFE4" "#F8F8F2"])
  ;;  '(compilation-message-face (quote default))
  ;;  '(custom-safe-themes
  ;;    (quote
  ;;     ("0eebf69ceadbbcdd747713f2f3f839fe0d4a45bd0d4d9f46145e40878fc9b098" default)))
  ;;  '(ede-project-directories (quote ("/home/steven/Dropbox/dev/Pong")))
  ;;  '(fci-rule-color "#49483E")
  ;;  '(highlight-changes-colors ("#FD5FF0" "#AE81FF"))
  ;;  '(highlight-tail-colors
  ;;    (("#49483E" . 0)
  ;;     ("#67930F" . 20)
  ;;     ("#349B8D" . 30)
  ;;     ("#21889B" . 50)
  ;;     ("#968B26" . 60)
  ;;     ("#A45E0A" . 70)
  ;;     ("#A41F99" . 85)
  ;;     ("#49483E" . 100)))
  ;;  '(magit-diff-use-overlays nil)
  ;;  '(vc-annotate-background nil)
  ;;  '(vc-annotate-color-map
  ;;    (quote
  ;;     ((20 . "#F92672")
  ;;      (40 . "#CF4F1F")
  ;;      (60 . "#C26C0F")
  ;;      (80 . "#E6DB74")
  ;;      (100 . "#AB8C00")
  ;;      (120 . "#A18F00")
  ;;      (140 . "#989200")
  ;;      (160 . "#8E9500")
  ;;      (180 . "#A6E22E")
  ;;      (200 . "#729A1E")
  ;;      (220 . "#609C3C")
  ;;      (240 . "#4E9D5B")
  ;;      (260 . "#3C9F79")
  ;;      (280 . "#A1EFE4")
  ;;      (300 . "#299BA6")
  ;;      (320 . "#2896B5")
  ;;      (340 . "#2790C3")
  ;;      (360 . "#66D9EF"))))
  ;;  '(vc-annotate-very-old-color nil)
  ;;  '(weechat-color-list
  ;;    (unspecified "#272822" "#49483E" "#A20C41" "#F92672" "#67930F" "#A6E22E" "#968B26" "#E6DB74" "#21889B" "#66D9EF" "#A41F99" "#FD5FF0" "#349B8D" "#A1EFE4" "#F8F8F2" "#F8F8F0")))
  ;; (custom-set-faces
  ;;  ;; custom-set-faces was added by Custom.
  ;;  ;; If you edit it by hand, you could mess it up, so be careful.
  ;;  ;; Your init file should contain only one such instance.
  ;;  ;; If there is more than one, they won't work right.
  ;;  )
  ;; ;; (defun my-c-mode-cedet-hook ()       
  ;; ;;   (add-to-list 'ac-sources 'ac-source-semantic))
  ;; ;; (add-hook 'c++-mode-hook 'my-c-mode-cedet-hook)
#+END_SRC

* PDF reader
To use pdf-tools to read pdf
#+BEGIN_SRC  emacs-lisp
  (pdf-loader-install)
#+END_SRC
* Emacs aesthetics:
** Theme
 #+BEGIN_SRC emacs-lisp
   (add-hook 'text-mode-hook
             (lambda ()
               (variable-pitch-mode 1)))

   (set-face-attribute 'default nil :family "Iosevka" :height 130)
   (set-face-attribute 'fixed-pitch nil :family "Iosevka")
   (set-face-attribute 'variable-pitch nil :family "Baskerville")

   (setq split-width-threshold 0)  ;; force to split window vertically
   ;; (load-theme 'poet-dark-monochrome t)
   (load-theme 'zenburn t)
 #+END_SRC
** Line and column numbering                                         :ARNAUD:
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC
** Parenthesis                                                       :ARNAUD:
#+BEGIN_SRC emacs-lisp
  (load-library "paren")
  (show-paren-mode 1)
  (transient-mark-mode t)
  (require 'paren)
#+END_SRC
** Indent
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
;; indentation c
(setq c-default-style "linux"
      c-basic-offset 4)

;; indentation python
(add-hook 'python-mode-hook
  (lambda ()
    (setq indent-tabs-mode nil)
    (setq python-indent 4)
    (setq tab-width 4)))
#+END_SRC
* Shortcuts:
** Load emacs initialization file:                                     :LUKA:
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c i") 
  (lambda() (interactive)(org-babel-load-file "~/.emacs.d/emacs.org")))
#+END_SRC
[16:28:10; 24.04.2013]

** Hide/show the C block:                                          :LUKA:WEB:
#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-common-hook
    (lambda()
      (local-set-key (kbd "C-c <right>") 'hs-show-block)
      (local-set-key (kbd "C-c <left>")  'hs-hide-block)
      (local-set-key (kbd "C-c <up>")    'hs-hide-all)
      (local-set-key (kbd "C-c <down>")  'hs-show-all)
      (hs-minor-mode t)))
#+END_SRC
[16:32:57; 24.04.2013]

** Reload buffer:                                                    :ARNAUD:
#+BEGIN_SRC emacs-lisp
  (global-set-key [f10] '(lambda () (interactive) (revert-buffer nil t nil)))
#+END_SRC
[16:34:57; 24.04.2013]
** Compile / Make
#+BEGIN_SRC emacs-lisp
  (global-set-key "\^x\^e" 'compile)
#+END_SRC
** Navigate back in text                                             :ARNAUD:
#+BEGIN_SRC emacs-lisp
  (defun jump-mark ()
    (interactive)
    (set-mark-command (point)))
  (defun beginning-of-defun-and-mark ()
    (interactive)
    (push-mark (point))
    (beginning-of-defun))
  (defun end-of-defun-and-mark ()
    (interactive)
    (push-mark (point))
    (end-of-defun))

  (global-set-key "\^c\^b" 'beginning-of-defun-and-mark)
  (global-set-key "\^c\^e" 'end-of-defun-and-mark)
  (global-set-key "\^c\^j" 'jump-mark)
  (global-set-key [S-f6] 'jump-mark)              ;; jump from mark to mark
#+END_SRC
** Goto line                                                         :ARNAUD:
#+BEGIN_SRC emacs-lisp
  (global-set-key "\M-g" 'goto-line)
#+END_SRC
** Use X clipboard (cut'n paste)                                        :WEB:
Since I switched to emacs 24, cutting and pasting to emacs has
become burdensome. For example, I had to do S-C-c after selecting
terminals areas before being able to copy in emacs. With the
following commants, I don't have to do this anymore. I wish it
would have eased interactions when running emacs in a terminal
(i.e., with =-nw=) but it does not. :( [[http://stackoverflow.com/questions/13036155/how-to-to-combine-emacs-primary-clipboard-copy-and-paste-behavior-on-ms-windows]]
#+BEGIN_SRC emacs-lisp
  (setq select-active-regions nil)
  (setq x-select-enable-primary t)
  (setq x-select-enable-clipboard t)
  (setq mouse-drag-copy-region t)
#+END_SRC
** Cut'n paste in no-window mode                                        :WEB:
Despite what can be found in many old discussions on emacs mailing
lists, it seems to be possible and the trick is to use xclip!
[[http://stackoverflow.com/questions/4580835/emacs-copy-kill-ring-to-system-clipboard-in-nowindow-mode]]   [[http://stackoverflow.com/questions/5288213/how-can-i-paste-the-selected-region-outside-of-emacs/14659015#14659015]]

If you simply use the following commands, then emacs cut-n-paste works
just perfectly with the X clipboard. I can select in emacs no window
and then paste with the middle-click button! :) Many thanks to Vijay
for pointing me out that I had forgotten the "require" line... :)
#+BEGIN_SRC emacs-lisp
  (require 'xclip)
  (xclip-mode 1)
#+END_SRC
** Increase/decrease text size in emacs                                 :WEB:
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  ;; C-x C-0 restores the default font size
#+END_SRC
[11:26:47; 18.04.2014]
** Add spell checker to the file                                        :WEB:
#+BEGIN_SRC emacs-lisp
  ;; Inspired from http://tex.stackexchange.com/questions/166681/changing-language-of-flyspell-emacs-with-a-shortcut
  ;; (defun spell (choice)
  ;;    "Switch between language dictionaries."
  ;;    (interactive "cChoose:  (a) American | (f) Francais")
  ;;     (cond ((eq choice ?1)
  ;;            (setq flyspell-default-dictionary "american")
  ;;            (setq ispell-dictionary "american")
  ;;            (ispell-kill-ispell))
  ;;           ((eq choice ?2)
  ;;            (setq flyspell-default-dictionary "francais")
  ;;            (setq ispell-dictionary "francais")
  ;;            (ispell-kill-ispell))
  ;;           (t (message "No changes have been made."))) )

  (define-key global-map (kbd "C-c s a") (lambda () (interactive) (ispell-change-dictionary "american")))
  (define-key global-map (kbd "C-c s f") (lambda () (interactive) (ispell-change-dictionary "francais")))
  (define-key global-map (kbd "C-c s r") 'flyspell-region)
  (define-key global-map (kbd "C-c s b") 'flyspell-buffer)
  (define-key global-map (kbd "C-c s s") 'flyspell-mode)
#+END_SRC
* Small fixes:
** PDF with LaTeX by default                                         :ARNAUD:
#+BEGIN_SRC emacs-lisp
  (defun auto-fill-mode-on () (TeX-PDF-mode 1))
  (add-hook 'tex-mode-hook 'TeX-PDF-mode-on)
  (add-hook 'latex-mode-hook 'TeX-PDF-mode-on)
  (setq TeX-PDF-mode t)
#+END_SRC
** Auto-fill-mode
#+BEGIN_SRC emacs-lisp
  (defun auto-fill-mode-on () (auto-fill-mode 1))
  (add-hook 'text-mode-hook 'auto-fill-mode-on)
  (add-hook 'emacs-lisp-mode 'auto-fill-mode-on)
  (add-hook 'tex-mode-hook 'auto-fill-mode-on)
  (add-hook 'latex-mode-hook 'auto-fill-mode-on)
#+END_SRC
** C coding style                                                       :WEB:
From [[http://www.emacswiki.org/emacs/IndentingC]].
#+BEGIN_SRC emacs-lisp
  (setq c-default-style "k&r")
;;  (setq c-basic-offset 2)
#+END_SRC
** Convenient shortcut to reindent C files
#+BEGIN_SRC emacs-lisp
  (defun c-reformat-buffer()
     (interactive)
     (save-buffer)
     (setq sh-indent-command (concat
  			    "indent -i2 -kr --no-tabs"
  			    buffer-file-name
  			    )
  	 )
     (mark-whole-buffer)
     (universal-argument)
     (shell-command-on-region
      (point-min)
      (point-max)
      sh-indent-command
      (buffer-name)
      )
     (save-buffer)
     )
   (define-key c-mode-base-map [f7] 'c-reformat-buffer)
#+END_SRC
** Asking for confirmation concisely:                                   :WEB:
Link: [[http://org.ryuslash.org/dotfiles/emacs/init.html#sec-7-1]]
Being asked to type in yes explicitly all the time gets very tedious. I understand that it is safer since y is much easier to type in accidentally than yes and so the potential to say yes to things you don't want is there, but I haven't had any such problems yet.

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
[16:27:20; 24.04.2013]
* Org-mode convenient configuration
** Default directory
#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/org/")
#+END_SRC
** Cosmetics
#+BEGIN_SRC emacs-lisp
  (setq org-hide-leading-stars t)
  (setq org-alphabetical-lists t)
  (setq org-src-fontify-natively t)  ;; you want this to activate coloring in blocks
  (setq org-src-tab-acts-natively t) ;; you want this to have completion in blocks
  (setq org-hide-emphasis-markers t) ;; to hide the *,=, or / markers
  (setq org-pretty-entities t)       ;; to have \alpha, \to and others display as utf8 http://orgmode.org/manual/Special-symbols.html

  (require 'org-bullets)             ;; Nicer bullets
  (setq org-bullets-bullet-list
        '("◉" "○"))
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC
** Agenda
*** Add short cut keys for the org-agenda                            :ARNAUD:
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map (kbd "C-c a") 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
  (setq org-default-notes-file "~/org/notes.org")
       (define-key global-map "\C-cd" 'org-capture)
  (setq org-capture-templates (quote (("t" "Todo" entry (file+headline "~/org/liste.org" "Tasks") "* TODO %?
    %i
    %a" :prepend t) ("j" "Journal" entry (file+datetree "~/org/journal.org") "* %?
  Entered on %U
    %i
    %a"))))
#+END_SRC

*** Agenda config                                                    :ARNAUD:
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-include-all-todo t)
  (setq org-agenda-include-diary t)
#+END_SRC

*** Google agenda                                                    :ARNAUD:
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (quote ("~/org/liste.org" "~/org/google.org")))
  (setq revert-without-query (quote ("google.org")))
#+END_SRC

** Org-id for storing objects ???                                    :ARNAUD:
#+BEGIN_SRC emacs-lisp
  (setq org-id-method (quote uuidgen))
#+END_SRC

** Setting "Wrap at window edge" for .org mode:                         :WEB:
#+BEGIN_SRC emacs-lisp
  ;; (global-visual-line-mode t)
#+END_SRC

[16:32:35; 24.04.2013]

** Heading is DONE when all checkboxes are checked:                     :WEB:
Mark heading done when all checkboxes are checked.

An item consists of a list with checkboxes. When all of the checkboxes are checked, the item should be considered complete and its TODO state should be automatically changed to DONE. The code below does that. This version is slightly enhanced over the one in the mailing list (see [[http://thread.gmane.org/gmane.emacs.orgmode/42715/focus=42721]]) to reset the state back to TODO if a checkbox is unchecked.

Note that the code requires that a checkbox statistics cookie (the [/] or [%] thingie in the headline - see the Checkboxes section in the manual) be present in order for it to work. Note also that it is too dumb to figure out whether the item has a TODO state in the first place: if there is a statistics cookie, a TODO/DONE state will be added willy-nilly any time that the statistics cookie is changed.

#+BEGIN_SRC emacs-lisp
  ;; see http://thread.gmane.org/gmane.emacs.orgmode/42715
  (eval-after-load 'org-list
    '(add-hook 'org-checkbox-statistics-hook (function ndk/checkbox-list-complete)))

  (defun ndk/checkbox-list-complete ()
    (save-excursion
      (org-back-to-heading t)
      (let ((beg (point)) end)
        (end-of-line)
        (setq end (point))
        (goto-char beg)
        (if (re-search-forward "\\[\\([0-9]*%\\)\\]\\|\\[\\([0-9]*\\)/\\([0-9]*\\)\\]" end t)
  	    (if (match-end 1)
  		(if (equal (match-string 1) "100%")
  		    ;; all done - do the state change
  		    (org-todo 'done)
  		  (org-todo 'todo))
  	      (if (and (> (match-end 2) (match-beginning 2))
  		       (equal (match-string 2) (match-string 3)))
  		  (org-todo 'done)
  		(org-todo 'todo)))))))
#+END_SRC

[16:27:59; 24.04.2013]

** Timestamp when closing items                                     :STEVEN:
#+BEGIN_SRC  emacs-lisp
  (setq org-log-done 'time)
#+END_SRC
* Org-mode shortcuts
** Adding date with brackets with command "C-c d":                     :LUKA:
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
  (lambda ()
  (global-set-key (kbd "C-c d") 'insert-date)
  (defun insert-date (prefix)
      "Insert the current date. With prefix-argument, use ISO format. With
     two prefix arguments, write out the day and month name."
      (interactive "P")
      (let ((format (cond
  		   ((not prefix) "** %Y-%m-%d")
  		   ((equal prefix '(4)) "[%Y-%m-%d]"))))
        (insert (format-time-string format))))
))
#+END_SRC
[16:34:01; 24.04.2013]

** Adding date with command "C-c t":                                   :LUKA:
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
  (lambda ()
  (global-set-key (kbd "C-c t") 'insert-time-date)
  (defun insert-time-date (prefix)
      "Insert the current date. With prefix-argument, use ISO format. With
     two prefix arguments, write out the day and month name."
      (interactive "P")
      (let ((format (cond
  		   ((not prefix) "[%H:%M:%S; %d.%m.%Y]")
  		   ((equal prefix '(4)) "[%H:%M:%S; %Y-%m-%d]"))))
        (insert (format-time-string format))))
))
#+END_SRC
[16:34:15; 24.04.2013]

** Fix view TODO tree:                                                 :LUKA:
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
  (lambda ()
  (global-set-key (kbd "C-c v") 'org-show-todo-tree)
))
#+END_SRC
[16:34:40; 24.04.2013]
** Org-store-link:                                                   :ARNAUD:
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
  (lambda ()
  (global-set-key (kbd "C-c l") 'org-store-link)
))
#+END_SRC
[16:35:48; 24.04.2013]

** Adding shortcut for interactively inserting git link:               :LUKA:
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
  (lambda ()
  (global-set-key (kbd "C-c g") 'org-git-insert-link-interactively)
))
#+END_SRC
[16:36:31; 24.04.2013]

** Adding shortcut for data entry:                                     :LUKA:
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
  (lambda ()
  (global-set-key (kbd "C-c e") (lambda ()
  		  (interactive)
  		  (insert "** data#\n*** git:\n#+begin_src sh\ngit log -1\n#+end_src\n*** Notes:" )))
  		  ;;(insert "** data#\n[[shell:git log -1][git]]\n" )))
  		  ;;(insert "** data#\n[[shell:git log -1][git]]\n" (format-time-string "[%H:%M:%S; %d.%m.%Y]" ))))
))
#+END_SRC
[16:36:15; 24.04.2013]

** Navigating through org-mode:
Additional shortcuts for navigating through org-mode documents:
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
  (lambda ()
  (global-set-key (kbd "C-c <up>") 'outline-up-heading)
  (global-set-key (kbd "C-c <left>") 'outline-previous-visible-heading)
  (global-set-key (kbd "C-c <right>") 'outline-next-visible-heading)
))
#+END_SRC
[18:01:07; 27.05.2013]

** Narrowing
Convenient built-in shortcuts.
#+BEGIN_EXAMPLE
C-x n s     (org-narrow-to-subtree)
    Narrow buffer to current subtree.
C-x n b     (org-narrow-to-block)
    Narrow buffer to current block.
C-x n w     (widen)
    Widen buffer to remove narrowing. 
#+END_EXAMPLE
* Org-mode + babel:
** Seamless use of babel (no confirmation, lazy export)              :ARNAUD:
#+BEGIN_SRC emacs-lisp
  (setq org-export-babel-evaluate nil)
  (setq org-confirm-babel-evaluate nil)
  (custom-set-faces)
#+END_SRC
** Some initial languages we want org-babel to support:              :ARNAUD:
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (C . t)
     (shell . t)
     (python . t)
     (R . t)
     (ruby . t)
     (ditaa . t)
     (dot . t)
     (octave . t)
     (sqlite . t)
     (perl . t)
     (screen . t)
     (plantuml . t)
     (lilypond . t)
     ))
#+END_SRC

** Adding source code blocks:                                          :LUKA:
*** With capital letters:
To use this type <S and then TAB
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
  	'("S" "#+begin_src ?\n\n#+end_src" "<src lang=\"?\">\n\n</src>"))
#+END_SRC

*** Emacs-elisp code:
To use this type <m and then TAB
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
  	'("m" "#+begin_src emacs-lisp\n\n#+end_src" "<src lang=\"emacs-lisp\">\n\n</src>"))
#+END_SRC

*** R code:
To use this type <r and then TAB
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
  	'("r" "#+begin_src R :results output :session :exports both\n\n#+end_src" "<src lang=\"R\">\n\n</src>"))
#+END_SRC

To use this type <R and then TAB
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
  	'("R" "#+begin_src R :results output graphics :file (org-babel-temp-file \"figure\" \".png\") :exports both :width 600 :height 400 :session\n\n#+end_src" "<src lang=\"R\">\n\n</src>"))
#+END_SRC

*** Python code:
To use this type <p and then TAB
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
  	'("p" "#+begin_src python :results output raw :exports both\n\n#+end_src" "<src lang=\"python\">\n\n</src>"))
#+END_SRC
*** Bash "sh" code:
To use this type <b and then TAB
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
  	'("b" "#+begin_src sh :results output :exports both\n\n#+end_src" "<src lang=\"sh\">\n\n</src>"))
#+END_SRC

To use this type <B and then TAB. This comes with a session argument
(e.g., in case you want to keep ssh connexions open).
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
  	'("B" "#+begin_src sh :session foo :results output :exports both \n\n#+end_src" "<src lang=\"sh\">\n\n</src>"))
#+END_SRC

[18:23:44; 21.06.2013]
** Evaluating whole subtree:                                           :LUKA:
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c S-t") 'org-babel-execute-subtree)
#+END_SRC

[15:25:16; 17.12.2013]
** Display images                                                    :ARNAUD:
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images) 
  (add-hook 'org-mode-hook 'org-display-inline-images)
  (add-hook 'org-mode-hook 'org-babel-result-hide-all)
#+END_SRC
** Plantuml                                                         :STEVEN:
#+BEGIN_SRC emacs_lisp
  (setq org-plantuml-jar-path "/home/squinito/Downloads/plantuml.jar")
#+END_SRC

* Org-mode LaTeX export
** ACM                                                               :ARNAUD:
#+BEGIN_SRC emacs-lisp
  (unless (boundp 'org-latex-classes) (setq org-latex-classes nil))

  (add-to-list 'org-latex-classes '("acm-proc-article-sp" "\\documentclass{acm_proc_article-sp}\n \[NO-DEFAULT-PACKAGES]\n \[EXTRA]\n  \\usepackage{graphicx}\n  \\usepackage{hyperref}"  ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}")                       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")                       ("\\paragraph{%s}" . "\\paragraph*{%s}")                       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (setq org-latex-to-pdf-process '("pdflatex -interaction nonstopmode -output-directory %o %f ; bibtex `basename %f | sed 's/\.tex//'` ; pdflatex -interaction nonstopmode -output-directory  %o %f ; pdflatex -interaction nonstopmode -output-directory %o %f"))
#+END_SRC
** General articles                                                    :LUKA:
I'm not completely sure I need this. I could probably remove it...
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-classes '("article" "\\documentclass{article}\n \[NO-DEFAULT-PACKAGES]\n \[EXTRA]\n  \\usepackage{graphicx}\n  \\usepackage{hyperref}"  ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}")                       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")                       ("\\paragraph{%s}" . "\\paragraph*{%s}")                       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

[15:18:27; 16.05.2013]
** CV :Steven:
# (add-to-list 'org-latex-classes '("moderncv" "\\documentclass{moderncv}\n \[NO-DEFAULT-PACKAGES]\n \[EXTRA]\n  \\usepackage{graphicx}\n  \\usepackage{hyperref}"  ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}")                       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")                       ("\\paragraph{%s}" . "\\paragraph*{%s}")                       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+begin_src emacs-lisp

  (add-to-list 'org-latex-classes '("moderncv" "\\documentclass{moderncv}\n \[NO-DEFAULT-PACKAGES]\n \[EXTRA]\n  \\usepackage{graphicx}\n "  ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}")                       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")                       ("\\paragraph{%s}" . "\\paragraph*{%s}")                       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (add-to-list 'org-latex-classes '("memoir" "\\documentclass{memoir}\n \[NO-DEFAULT-PACKAGES]\n \[EXTRA]\n  \\usepackage{graphicx}\n \\usepackage{hyperref}"  ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}")                       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")                       ("\\paragraph{%s}" . "\\paragraph*{%s}")                       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src
* Remote file editing-TRAMP:                                            :WEB:
This is installed by default for most of emacs
Remote File Editing Using Emacs

Emacs has a package called TRAMP (Transparent Remote (file) Access, Multiple Protocol) which allows you to edit files on remote machines via SSH. Since Emacs 22, TRAMP is included with the distribution.

All you need to do is add the following lines to your .emacs file,

#+BEGIN_SRC emacs-lisp
  (require 'tramp)
  (setq tramp-default-method "scp")
#+END_SRC

Then in order to open a file on a remote machine, you can use,

C-x C-f /user@your.host.com:/path/to/file

If you don't want to enter your password every time you open or save a file consider using Public Key Authentication.

TRAMP mode can also be used to edit files on the same machine as another user, if you want to open some file as root you can use,

    C-x C-f /root@127.0.0.1:/path/to/file
[12:25:12; 13.06.2013]
* Miscellanous
** Spelling checker
#+BEGIN_SRC emacs-lisp
(setq-default ispell-program-name "aspell")
(setq ispell-dictionary "french")
#+END_SRC
** Undo tree
#+BEGIN_SRC emacs-lisp
  (global-undo-tree-mode)
#+END_SRC

